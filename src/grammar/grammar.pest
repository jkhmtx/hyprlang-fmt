/// REF
/// - https://pest.rs/book/grammars/built-ins.html#general-categories
/// - https://www.unicode.org/versions/Unicode16.0.0/

WHITESPACE      = _{ " " }
newline = { NEWLINE }
escaped_comment = _{ "##" }

/// Skip '#' (\u23)
/// Skip ';' (\u3B)
/// Skip '[' (\u5B)
/// Skip ']' (\u5D)
/// Do not include DELETE (\u7F)
most = _{
    "!"
  | "\""
  | '\u{24}'..'\u{3A}'
  | '\u{3C}'..'\u{5A}'
  | "\\"
  | '\u{5E}'..'\u{7E}'
}

safe_any = _{
    most
  | " "
  | "#"
  | ";"
  | "["
  | "]"
}

comment_text = @{ safe_any* }

comment_hashes = { "#"+ ~ "# "?  }
comment = { comment_hashes ~ comment_text }

word = _{ ASCII_ALPHANUMERIC+ }

bind_keyword        = { "exec-shutdown" | "exec-once" | "execr-once" }
category_bind_ident = {
    ASCII_ALPHANUMERIC+ ~ ("[" ~ word ~ "]"){0, 1} ~ ":" ~ word
}


variable_ident      = { "$" ~ word }
variable_expression = { (variable_ident | most | escaped_comment)* }

assignment = { (variable_ident ~ "=" ~ variable_expression) ~ comment? }

bind_ident = { category_bind_ident | (ASCII_ALPHANUMERIC | "_" | "." | "-")+ }

arithmetic_expression_member = { ASCII_DIGIT+ | variable_ident }
arithmetic_expression_infix  = { "+" | "-" | "/" | "*" }
arithmetic_expression        = { !("\\" ~ "{{") ~ "{{" ~ arithmetic_expression_member ~ arithmetic_expression_infix ~ arithmetic_expression_member ~ "}}" }

expression = _{ arithmetic_expression+ | (("$" ~ word) | escaped_comment | most)+ }

bind_rule_start     = _{ "[" }
bind_rule_delimiter = _{ (";" ~ " "?) | ("," ~ " "?) | (" ") }
bind_rule_single    = _{ expression ~ bind_rule_delimiter? }
bind_rule_end       = _{ "]" }
bind_rule           = _{ bind_rule_start ~ bind_rule_single+ ~ bind_rule_end }

bind_rhs = { bind_rule_delimiter? ~ (bind_rule | bind_rule_single)* }

bind = { (bind_ident ~ "=" ~ bind_rhs) ~ comment? }

category_ident = { ASCII_ALPHANUMERIC+ }

category_start = _{ "{" }
category_inner =  { (category | comment | bind | newline)* }
category_end   = { "}" }

category = { (category_ident ~ category_start ~ category_inner ~ category_end) ~ comment? }

file = {
    SOI ~ (comment | bind | assignment | category | newline)* ~ EOI
}
